version: '3.7'

services: # the different images that will be running as containers
  web: # service name
    build:
      context: . # build the image for the web service from the dockerfile in parent directory.
      target: development-stage # docker-compose is only run for the local setup
    volumes:
      - .:/app # map data and files from parent directory in host to plio directory in docker container
      - /app/node_modules # we need to mount the node_modules folder because the volume is not mounted during the build.
    env_file: # file where env variables are stored. Used as best practice so as not to expose secret keys
      - .env # name of the env file
    image: plio-frontend # name of the image
    ports:
      - "${APP_PORT}:${APP_PORT}"
    restart: "on-failure"

  e2e:
    image: cypress
    build: .
    container_name: cypress
    depends_on:
      - web
    # note: inside e2e container, the network allows accessing
    # "web" host under name "web"
    # so "curl http://web" would return whatever the webserver
    # in the "web" container is cooking
    # see https://docs.docker.com/compose/networking/
    environment:
      - CYPRESS_baseUrl=http://web
    # command: npx cypress run
    # mount the host directory e2e/cypress and the file e2e/cypress.json as
    # volumes within the container
    # this means that:
    #  1. anything that Cypress writes to these folders (e.g., screenshots,
    #     videos) appears also on the Docker host's filesystem
    #  2. any change that the developer applies to Cypress files on the host
    #     machine immediately takes effect within the e2e container (no docker
    #     rebuild required).
    volumes:
      - ./tests/integration:/tests/integration
      - ./cypress.json:/cypress.json
